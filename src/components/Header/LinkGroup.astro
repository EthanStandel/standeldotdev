---
import Link from "../Link.astro";

export interface Props {
  animate?: boolean;
}

const { pathname } = Astro.url; 
const links = {
  "/": { label: "Home", href: "/", match: "exact" },
  "/blog": { label: "Blog", href: "/blog" },
  "/theming": { label: "Theming", href: "/theming" },
  "/about": { label: "About", href: "/about" }
} as Record<string, { label: string, href: string, match?: "exact" | "prefix" }>
const { animate } = Astro.props;
---
{Object.values(links).map(({ label, href, match = "prefix" }, index) => {
  return (
    <span class:list={[animate ? "link-animation" : "", "center"]}
      style={
        animate
          ? `animation-delay: ${(index + 1) * 100}ms;` 
          : ""}>
      <Link size="big"
        href={href}
        highlight={
          match === "exact"
            ? pathname === href
            : pathname.startsWith(href)
          }>
        {label}
      </Link>
    </span>
  );
})}
<style lang="scss">
  .link-animation {
    animation: fadeIn .2s ease forwards;
    transform: translate(-25px);
    opacity: 0;
    display: inline-block;
  }

  .center {
    display: flex;
    justify-content: center;
    align-items: center;
  }
</style>
<script define:vars={{ links }}>
  const navHandler = (event) => {
    const nextpath = event instanceof CustomEvent ? new URL(event.detail.url).pathname : location.pathname
    document.body.querySelectorAll("header a.highlight")
      .forEach(link => link.classList.remove("highlight"));
    document.querySelectorAll("header a.big").forEach(anchor => {
      const link = links[new URL(anchor.href).pathname];
      if(
        !!link && (
          link.match === "exact"
            ? nextpath === link.href
            : nextpath.startsWith(link.href))
      ) {
        anchor.classList.add("highlight");
      }
    })
  }
  document.addEventListener("turbo:click", navHandler);
  window.addEventListener("popstate", navHandler);
</script>